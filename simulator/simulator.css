body:has(.deck) {
    display: grid;
    font-size: 3rem;
    gap: 1rem;
    padding: 0;
    margin: 0;
    max-width: 100vw;
    height: 100vh;
    grid-template-areas:
        "HIGHLIGHT OPHAND OPDECK"
        "HIGHLIGHT OPFIELD OPDECK"
        "HIGHLIGHT FIELD OPDISCARD"
        "DECK HAND DISCARD"
    ;
    --field-scale: 0.6;
    --field-padding: 1rem;
    grid-template-rows: 10% calc(3.5in * var(--field-scale) + var(--field-padding) * 2) calc(3.5in * var(--field-scale) + var(--field-padding) * 2) auto;
    grid-template-columns: 400px 1fr 400px;
    background:
        linear-gradient(lightgrey 0 0),
        url(simulator-bg.png),
        linear-gradient(rgb(127, 127, 127) 0 0);
    background-blend-mode: darken, screen;
    background-size: cover;
    background-repeat: no-repeat;
    background-position: center;
    --lum: 30%;
    background-color: hsl(0 0 var(--lum));
    /* background-color: slateblue; */
}

body>* {
    /* debug */
    /* outline: 1px solid red;  */
}

.discard,
.deck {
    /* same as card */
    grid-area: DECK;
    width: 2.5in;
    height: 100%;
    position: relative;
    /* Kinda arbitrary for now */
    perspective: 1000px;
    justify-self: center;
    align-self: end;
    /* just to size down a bit */
    scale: 0.9;
}

.discard {
    grid-area: DISCARD;

}

.discard .card,
.deck .card {
    position: absolute;
    box-shadow: rgba(0, 0, 0, 0.4) 0px 5px 1px;
    rotate: x 60deg;
    backface-visibility: hidden;
    --distance-offset: calc(var(--position, 0) * 1.5px);
    transform-origin: bottom center;
    bottom: var(--distance-offset);
}

.deck .card::after {
    content: '';
    right: 0px;
    bottom: 0px;
    position: absolute;
    top: 0px;
    left: 0px;
    z-index: 3;
    background-image: url(card-back.png);
    background-size: 100% 100%;
}

#opfield,
:is(.field, #opfield) {
    grid-area: FIELD;
    display: flex;
    align-items: stretch;
    /* flex-wrap: no-wrap; */
    gap: 1rem;
    padding: var(--field-padding);
    overflow-x: auto;
    /* scaling of cards 1/scale because scale will also affect new height, so that calc make it 100% again*/
    justify-self: center;
    align-self: center;
    width: calc(100% * (1/var(--field-scale)));
    height: calc(100% * (1/var(--field-scale)));
    scale: var(--field-scale);
    /* scale here */
    /* width: 110vw; */
    /* 1920 1728 */
}

/* on field cards styling it's simplified, maybe reuse it on hand*/
:is(.field, #opfield) .card,
.hand .card {
    flex-shrink: 0;
    margin-bottom: 0;
    box-shadow: rgba(0, 0, 0, 0.3) 5px 5px 10px, rgba(0, 0, 0, 0.3) -5px -5px 10px;
}

:is(.field, #opfield) .text-box {
    display: none;
}

:is(.field, #opfield) .card-title {
    font-size: 2rem;
    width: 100%;
    text-align: center;
    background-color: rgba(255, 255, 255, 0.3);
    height: 2.6rem;
    top: calc(90% - var(--spacing));
    z-index: 3;
}

:is(.field, #opfield) .number-suit {
    font-size: 4rem;
}

:is(.field, #opfield) .card-cost {
    font-size: 4.5rem;
    height: 4.5rem;
    width: 4.5rem;
}

:is(.field, #opfield) .card img {
    /* normally 65 */
    height: 55%;
    top: calc(var(--spacing) + 10%)
}

:is(.field, #opfield) .card:has(.monster-status) .card-title {
    top: calc(75% - var(--spacing));
}

:is(.field, #opfield) .monster-status,
:is(.field, #opfield) .card:has(.monster-status)::before {
    left: 50%;
    bottom: 3rem;
    transform: translate(-50%);
    transform-origin: left;
    scale: 1.6;
}

/* needs to be after on DOM to work, but it works */
:is(.field, #opfield):has(.card:hover)~.highlight {
    /* outline-color: white; */
}

/* end of field styles */

.highlight {
    grid-area: HIGHLIGHT;
    display: grid;
    place-content: center;
}

.highlight .card {
    scale: 1.5;
    pointer-events: none;
}


/* maybe dont show the full card, only show when hovering */
.hand {
    grid-area: HAND;
    display: flex;
    justify-items: stretch;
    overflow: hidden;
    /* scaling of cards 1/scale because scale will also affect new height, so that calc make it 100% again*/
    justify-self: center;
    align-self: center;
    /* measures need to take scale in consideration */
    --hand-scale: 0.75;
    width: calc(100% * (1/var(--hand-scale)));
    height: calc(100% * (1/var(--hand-scale)));
    padding: calc(5% * (1/var(--hand-scale))) 0;
    padding-top: calc(10% * (1/var(--hand-scale)));
    scale: var(--hand-scale);
    justify-content: center;
    align-content: center;
}

/* move up when hover */
.hand .card:hover {
    margin-top: calc(-5% * (1/var(--hand-scale)));
    rotate: 0deg !important;
    transform: none !important;
    z-index: 3;
    scale: 1.1;
}

.hover-area {
    display: none;
}

.hand .hover-area {
    display: block;
    position: absolute;
    width: 100%;
    height: 150%;
    top: 0;
    left: 0;
    /* border: 3px solid red; */
}


.hand .card:not(:first-child) {
    /* if this could be porpotional to N, that would be nice*/
    margin-left: calc(-5% * (1/var(--hand-scale)));
    ;
}

.hand .card {
    transform-origin: bottom center;
    transition: 0.08s;
    will-change: margin-top;
    transform: translateY(var(--y));
    rotate: var(--deg);
}

:is(.field, #opfield) .card.drag-over {
    outline: 6px solid #00FFFF;
}

body.dragging :is(.field, #opfield).drag-over,
body.dragging .opfield.drag-over,
body.dragging .discard.drag-over,
body.dragging .hand.drag-over {
    outline-color: red;
}

body.dragging :is(.field, #opfield),
body.dragging .opfield,
body.dragging .discard,
body.dragging .hand {
    outline: 6px dashed black;
}


#discard-view {
    display: grid;
    grid-template-columns: repeat(5, 1fr);
    padding: 2rem;
    gap: 2rem;
    z-index: 4;
    background-color: white;
    position: absolute;
    width: 80vw;
    height: 80vh;
    left: 50%;
    top: 50%;
    border-radius: 5px;
    background-color: #aaa;
    overflow: auto;
    box-shadow: rgba(0, 0, 0, 0.3) 0px 19px 38px, rgba(0, 0, 0, 0.22) 0px 15px 12px;
    transform: translate(-50%, -50%);
    visibility: hidden;
    margin: 0 auto;
    justify-items: center;
}

:is(.field, #opfield),
.discard {
    outline: 5px dashed black;
}

.discard {
    outline-offset: 10px;
}

.hand.drag-over .card,
.discard.drag-over .card {
    pointer-events: none;
}

/* maybe show red only on drag:over */
#opdeck::after,
#opdiscard::after,
#opfield::after,
#ophand::after,
:is(.field, #opfield)::after,
.discard::after {
    content: 'DISCARD';
    display: grid;
    opacity: 0.7;
    place-content: center;
    position: absolute;
    top: 50%;
    left: 50%;
    z-index: 3;
    width: min-content;
    height: min-content;
    transform: translate(-50%, -50%) rotate(-45deg);
    pointer-events: none;
}

:is(.field, #opfield)::after {
    content: 'FIELD';
    transform: translate(-50%, -50%);
    z-index: -1;
}

#opdeck::after {
    content: 'OPDECK';
}

#opdiscard::after {
    content: 'OPDISCARD';
}

#opfield::after {
    content: 'OPFIELD';
}

#ophand::after {
    content: 'OPHAND';
}

#opdeck {
    grid-area: OPDECK;
}

#opdiscard {
    grid-area: OPDISCARD;
}

#opfield {
    grid-area: OPFIELD;
}

#ophand {
    grid-area: OPHAND;
}


#opdeck,
#opdiscard,
#opfield,
#ophand {
    position: relative;
    border: 2px solid red;
}

/* TODO, clean selectors using the :is */